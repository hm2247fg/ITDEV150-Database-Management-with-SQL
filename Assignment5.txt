Assignment 5
Chapters 7 & 8, Murach SQL Server 2012
Insert, Update, Delete Data in a Table: Insert, Update, and Delete data in a table, SQL Data Types


1.  Write an INSERT statement that adds this row to the Categories table:
    CategoryName:     Brass
Code the INSERT statement so SQL Server automatically generates the value for the 
CategoryID column.

insert into Categories (CategoryName)
values ('Brass');


2.  Write an UPDATE statement that modifies the row you just added to the Categories table. 
This statement should change the CategoryName column to “Woodwinds”, and it should use the 
CategoryID column to identify the row.

update Categories
set CategoryName = 'Woodwinds'
where CategoryID = 5;


3.  Write a DELETE statement that deletes the row you added to the Categories table in Activity 
1. This statement should use the CategoryID column to identify the row.

delete from Categories
where CategoryID = 5;


4.  Write an INSERT statement that adds this row to the Products table:
ProductID:The next automatically generated ID
    CategoryID:         4
    ProductCode:        dgx_640
    ProductName:        Yamaha DGX 640 88-Key Digital Piano
    Description:        Long description to come.
    ListPrice:          799.99
    DiscountPercent:    0
    DateAdded:          Today’s date/time.
Use a column list for this statement.

insert into Products
	(CategoryID, ProductCode, ProductName, Description, ListPrice, DiscountPercent, DateAdded)
values
	(4, 'dgx_640', 'Yamaha DGX 640 88-Key Digital Piano', 'Long description to come.', 799.99, 0, CURRENT_TIMESTAMP);


5.  Write an UPDATE statement that modifies the product you added in exercise 4. This 
statement should change the DiscountPercent column from 0% to 35%.

update Products
set DiscountPercent = 35
where ProductID = 11;


6.  Write a DELETE statement that deletes the row in the Categories table that has an ID of 4. 
When you execute this statement, it will produce an error since the category has related rows in 
the Products table. To fix that, precede the DELETE statement with another DELETE statement 
that deletes all products in this category.

delete from Products
where CategoryID = 4;
delete from Categories
where CategoryID = 4;


7.  Write an INSERT statement that adds this row to the Customers table:
    EmailAddress:     rick@raven.com
    Password:         (empty string)
    FirstName:        Rick
    LastName:         Raven
Use a column list for this statement.

insert into Customers
	(EmailAddress, Password, FirstName, LastName)
values
	('rick@raven.com', '', 'Rick', 'Raven');


8.  Write an UPDATE statement that modifies the Customers table. Change the password 
column to “secret” for the customer with an email address of rick@raven.com.

update Customers
set Password = 'secret'
where EmailAddress = 'rick@raven.com';


9.  Write an UPDATE statement that modifies the Customers table. Change the password 
column to “reset” for every customer in the table.

update Customers
set Password = 'reset';


10.  Open the script named CreateMyGuitarShop.sql that’s in the Exercise Starts directory. Then, 
run this script. That should restore the data that’s in the database.  NOTHING to be submitted.

Done.


11.  Write a SELECT statement that returns these columns from the Products table:
  The ListPrice column
  A column that uses the CAST function to return the ListPrice column with 1 digit to the
    right of the decimal point
  A column that uses the CONVERT function to return the ListPrice column as an integer
  A column that uses the CAST function to return the ListPrice column as an integer

select ListPrice,
	cast(ListPrice as decimal(18, 1)) as PriceFormat,
	convert(int, ListPrice) as PriceConvert,
	cast(ListPrice as Int) as PriceCast
from Products;


12.  Write a SELECT statement that returns these columns from the Products table:
  The DateAdded column
  A column that uses the CAST function to return the DateAdded column with its date only 
    (year, month, and day)
  A column that uses the CAST function to return the DateAdded column with its full time 
    only (hour, minutes, seconds, and milliseconds)
  A column that uses the CAST function to return the DateAdded column with just the 
    month and day

select DateAdded,
	format(cast(DateAdded as date), 'MM/dd/yyyy') as AddedDate,
	cast(DateAdded as time(0)) as AddedTime,
	format(cast(DateAdded as date), 'M') as AddedChar7
from Products;


13.  Write a SELECT statement that returns these columns from the Orders table:
  A column that uses the CONVERT function to return the OrderDate column in this 
    format: MM/DD/YY. In other words, use two-digit months, days, and years and separate each 
    date component with slashes
  A column that uses the CONVERT function to return the OrderDate column with the 
    date, and the hours and minutes on a 12-hour clock with an am/pm indicator
  A column that uses the CONVERT function to return the OrderDate column with 2-digit
    hours, minutes, and seconds on a 24-hour clock. Use leading zeros for all date/time components.

select 
	convert (varchar, OrderDate, 1) as OrderDateConverted,
	convert (varchar, OrderDate, 0) as AMPM,
	convert (varchar, OrderDate, 14) as OrderTime
from Orders;
